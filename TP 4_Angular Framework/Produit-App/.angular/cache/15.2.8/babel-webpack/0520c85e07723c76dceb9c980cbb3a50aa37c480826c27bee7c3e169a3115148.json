{"ast":null,"code":"import { finalize } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./app-state.service\";\nimport * as i2 from \"./loading.service\";\nexport class AppHttpInterceptor {\n  constructor(appState, loadingService) {\n    this.appState = appState;\n    this.loadingService = loadingService;\n  }\n  intercept(request, next) {\n    //  this.appState.setProductState({\n    //   status:'LOADING'\n    //  })\n    this.loadingService.showLoadingSpiner();\n    let req = request.clone({\n      headers: request.headers.set('Authorization', `Bearer `)\n    });\n    return next.handle(req).pipe(finalize(() => {\n      // this.appState.setProductState({\n      //   status:'LOADED'\n      // })\n      //2eme solution\n      this.loadingService.hideLoadingSpiner();\n    }));\n  }\n}\nAppHttpInterceptor.ɵfac = function AppHttpInterceptor_Factory(t) {\n  return new (t || AppHttpInterceptor)(i0.ɵɵinject(i1.AppStateService), i0.ɵɵinject(i2.LoadingService));\n};\nAppHttpInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppHttpInterceptor,\n  factory: AppHttpInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAOA,SAASA,QAAQ,QAAoB,MAAM;;;;AAK3C,OAAM,MAAOC,kBAAkB;EAE7BC,YAAmBC,QAAwB,EAASC,cAA6B;IAA9D,aAAQ,GAARD,QAAQ;IAAyB,mBAAc,GAAdC,cAAc;EAAkB;EAEpFC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IAC1D;IACA;IACA;IACA,IAAI,CAACH,cAAc,CAACI,iBAAiB,EAAE;IACrC,IAAIC,GAAG,GAAEH,OAAO,CAACI,KAAK,CACtB;MACEC,OAAO,EAAEL,OAAO,CAACK,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,SAAS;KACxD,CACD;IACD,OAAOL,IAAI,CAACM,MAAM,CAACJ,GAAG,CAAC,CAACK,IAAI,CAC3Bd,QAAQ,CAAC,MAAI;MACX;MACA;MACA;MACA;MACF,IAAI,CAACI,cAAc,CAACW,iBAAiB,EAAE;IACvC,CAAC,CAAC,CAEF;EAEA;;AAzBSd,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAe,SAAlBf,kBAAkB;AAAA","names":["finalize","AppHttpInterceptor","constructor","appState","loadingService","intercept","request","next","showLoadingSpiner","req","clone","headers","set","handle","pipe","hideLoadingSpiner","factory"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\AN\\angular-total-part1\\src\\app\\services\\app-http.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { finalize, Observable } from 'rxjs';\nimport { AppStateService } from './app-state.service';\nimport { LoadingService } from './loading.service';\n\n@Injectable()\nexport class AppHttpInterceptor implements HttpInterceptor {\n\n  constructor(public appState:AppStateService,private loadingService:LoadingService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n  //  this.appState.setProductState({\n  //   status:'LOADING'\n  //  })\n  this.loadingService.showLoadingSpiner();\n    let req =request.clone(\n    {\n      headers: request.headers.set('Authorization', `Bearer `),\n    }\n   );\n   return next.handle(req).pipe(\n    finalize(()=>{\n      // this.appState.setProductState({\n      //   status:'LOADED'\n      // })\n      //2eme solution\n    this.loadingService.hideLoadingSpiner();\n    })\n    \n   );\n\n    }\n  }\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}