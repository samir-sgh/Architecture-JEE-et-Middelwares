{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/User/Desktop/AN/Tp4_Angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { jwtDecode } from 'jwt-decode';\nimport { firstValueFrom, observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./app-state.service\";\nexport class AuthService {\n  constructor(http, appState) {\n    this.http = http;\n    this.appState = appState;\n  }\n  login(username, password) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let user = yield firstValueFrom(_this.http.get(\"http://localhost:3000/users/\" + username));\n      if (password == btoa(user.password)) {\n        let decodeJWT = jwtDecode(user.token);\n        _this.appState.setAuthState({\n          isAuthenticated: true,\n          username: decodeJWT.sub,\n          roles: decodeJWT.roles,\n          token: user.token\n        });\n        return observable;\n        return Promise.resolve(true);\n      } else {\n        return Promise.reject(\"Bad Credentials\");\n      }\n    })();\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AppStateService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAEA,SAASA,SAAS,QAAQ,YAAY;AACtC,SAASC,cAAc,EAAEC,UAAU,QAAQ,MAAM;;;;AAMjD,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAe,EAASC,QAAyB;IAAjD,SAAI,GAAJD,IAAI;IAAoB,aAAQ,GAARC,QAAQ;EAAqB;EACnEC,KAAK,CAACC,QAAe,EAAEC,QAAe;IAAA;IAAA;MAC1C,IAAIC,IAAI,SAAWT,cAAc,CAAC,KAAI,CAACI,IAAI,CAACM,GAAG,CAAC,8BAA8B,GAACH,QAAQ,CAAC,CAAC;MAC3F,IAAGC,QAAQ,IAAEG,IAAI,CAACF,IAAI,CAACD,QAAQ,CAAC,EAAC;QAC/B,IAAII,SAAS,GAAKb,SAAS,CAACU,IAAI,CAACI,KAAK,CAAC;QACvC,KAAI,CAACR,QAAQ,CAACS,YAAY,CAAC;UACzBC,eAAe,EAAC,IAAI;UACpBR,QAAQ,EAAEK,SAAS,CAACI,GAAG;UACvBC,KAAK,EAACL,SAAS,CAACK,KAAK;UACrBJ,KAAK,EAACJ,IAAI,CAACI;SACZ,CAAC;QACF,OAAOZ,UAAU;QACjB,OAAOiB,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;OAC7B,MAED;QACE,OAAOD,OAAO,CAACE,MAAM,CAAC,iBAAiB,CAAC;;IACzC;EACD;;AApBWlB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAmB,SAAXnB,WAAW;EAAAoB,YAFV;AAAM","names":["jwtDecode","firstValueFrom","observable","AuthService","constructor","http","appState","login","username","password","user","get","btoa","decodeJWT","token","setAuthState","isAuthenticated","sub","roles","Promise","resolve","reject","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\AN\\Tp4_Angular\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { jwtDecode } from 'jwt-decode';\nimport { firstValueFrom, observable } from 'rxjs';\nimport { AppStateService } from './app-state.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private http:HttpClient,private appState :AppStateService) { }\n  async login(username:string, password:string){\n    let user:any=await firstValueFrom(this.http.get(\"http://localhost:3000/users/\"+username));\n  if(password==btoa(user.password)){\n    let decodeJWT:any=jwtDecode(user.token);\n    this.appState.setAuthState({\n      isAuthenticated:true,\n      username :decodeJWT.sub,\n      roles:decodeJWT.roles,\n      token:user.token\n    });\n    return observable\n    return Promise.resolve(true);\n  }\n  else\n  {\n    return Promise.reject(\"Bad Credentials\"); \n  }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}