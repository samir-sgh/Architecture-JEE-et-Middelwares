{"ast":null,"code":"import { finalize } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./app-state.service\";\nexport class AppHttpInterceptor {\n  constructor(appState) {\n    this.appState = appState;\n  }\n  intercept(request, next) {\n    this.appState.setProductState({\n      status: 'LOADING'\n    });\n    let req = request.clone({\n      headers: request.headers.set('Authorization', `Bearer `)\n    });\n    return next.handle(req).pipe(finalize(() => {\n      this.appState.setProductState({\n        status: 'LOADED'\n      });\n    }));\n  }\n}\nAppHttpInterceptor.ɵfac = function AppHttpInterceptor_Factory(t) {\n  return new (t || AppHttpInterceptor)(i0.ɵɵinject(i1.AppStateService));\n};\nAppHttpInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppHttpInterceptor,\n  factory: AppHttpInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAOA,SAASA,QAAQ,QAAoB,MAAM;;;AAI3C,OAAM,MAAOC,kBAAkB;EAE7BC,YAAmBC,QAAwB;IAAxB,aAAQ,GAARA,QAAQ;EAAmB;EAE9CC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACzD,IAAI,CAACH,QAAQ,CAACI,eAAe,CAAC;MAC7BC,MAAM,EAAC;KACP,CAAC;IACD,IAAIC,GAAG,GAAEJ,OAAO,CAACK,KAAK,CACtB;MACEC,OAAO,EAAEN,OAAO,CAACM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,SAAS;KACxD,CACD;IACD,OAAON,IAAI,CAACO,MAAM,CAACJ,GAAG,CAAC,CAACK,IAAI,CAC3Bd,QAAQ,CAAC,MAAI;MACX,IAAI,CAACG,QAAQ,CAACI,eAAe,CAAC;QAC5BC,MAAM,EAAC;OACR,CAAC;IACJ,CAAC,CAAC,CACF;EAEA;;AArBSP,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAc,SAAlBd,kBAAkB;AAAA","names":["finalize","AppHttpInterceptor","constructor","appState","intercept","request","next","setProductState","status","req","clone","headers","set","handle","pipe","factory"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\AN\\angular-total-part1\\src\\app\\services\\app-http.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { finalize, Observable } from 'rxjs';\nimport { AppStateService } from './app-state.service';\n\n@Injectable()\nexport class AppHttpInterceptor implements HttpInterceptor {\n\n  constructor(public appState:AppStateService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n   this.appState.setProductState({\n    status:'LOADING'\n   })\n    let req =request.clone(\n    {\n      headers: request.headers.set('Authorization', `Bearer `),\n    }\n   );\n   return next.handle(req).pipe(\n    finalize(()=>{\n      this.appState.setProductState({\n        status:'LOADED'\n      })\n    })\n   );\n\n    }\n  }\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}