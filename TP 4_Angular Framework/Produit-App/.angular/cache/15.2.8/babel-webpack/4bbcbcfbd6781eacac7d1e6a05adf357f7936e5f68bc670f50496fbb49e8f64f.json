{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/app-state.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthorizationGuard {\n  constructor(appState, router, route) {\n    this.appState = appState;\n    this.router = router;\n    this.route = route;\n  }\n  canActivate(route, state) {\n    if (this.appState.authState.roles.includes(\"ADMIN\")) {\n      return true;\n    } else {\n      this.router.navigateByUrl(\"/admin/notAuthorized\");\n      return false;\n    }\n  }\n}\nAuthorizationGuard.ɵfac = function AuthorizationGuard_Factory(t) {\n  return new (t || AuthorizationGuard)(i0.ɵɵinject(i1.AppStateService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i2.ActivatedRoute));\n};\nAuthorizationGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthorizationGuard,\n  factory: AuthorizationGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,kBAAkB;EAC7BC,YAAoBC,QAA0B,EAAUC,MAAe,EAASC,KAAoB;IAAhF,aAAQ,GAARF,QAAQ;IAA4B,WAAM,GAANC,MAAM;IAAkB,UAAK,GAALC,KAAK;EACrF;EACAC,WAAW,CACTD,KAA6B,EAC7BE,KAA0B;IAC1B,IAAG,IAAI,CAACJ,QAAQ,CAACK,SAAS,CAACC,KAAK,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAC;MACjD,OAAO,IAAI;KAAE,MAEb;MACE,IAAI,CAACN,MAAM,CAACO,aAAa,CAAC,sBAAsB,CAAC;MACnD,OAAO,KAAK;;EAChB;;AAZWV,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAW,SAAlBX,kBAAkB;EAAAY,YAFjB;AAAM","names":["AuthorizationGuard","constructor","appState","router","route","canActivate","state","authState","roles","includes","navigateByUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\AN\\Tp4_Angular\\src\\app\\guards\\authorization.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRoute, ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AppStateService } from '../services/app-state.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorizationGuard  {\n  constructor(private appState : AppStateService, private router : Router,private route:ActivatedRoute) {\n  }\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if(this.appState.authState.roles.includes(\"ADMIN\")){\n      return true;}\n      else\n      {\n        this.router.navigateByUrl(\"/admin/notAuthorized\");\n      return false;}\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}