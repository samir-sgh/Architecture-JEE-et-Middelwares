{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/app-state.service\";\nexport class AuthenticationGuard {\n  constructor(appState) {\n    this.appState = appState;\n  }\n  canActivate(route, state) {\n    if (this.appState.authState.isAuthenticated == true) {\n      return true;\n    } else {\n      this.router.navigateByUrl(\"/login\");\n      return false;\n    }\n  }\n}\nAuthenticationGuard.ɵfac = function AuthenticationGuard_Factory(t) {\n  return new (t || AuthenticationGuard)(i0.ɵɵinject(i1.AppStateService));\n};\nAuthenticationGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationGuard,\n  factory: AuthenticationGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,mBAAmB;EAC9BC,YAAoBC,QAAwB;IAAxB,aAAQ,GAARA,QAAQ;EAE5B;EACAC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAC1B,IAAG,IAAI,CAACH,QAAQ,CAACI,SAAS,CAACC,eAAe,IAAE,IAAI,EAAC;MAC/C,OAAO,IAAI;KACZ,MAED;MACE,IAAI,CAACC,MAAM,CAACC,aAAa,CAAC,QAAQ,CAAC;MACnC,OAAO,KAAK;;EAEhB;;AAfWT,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAU,SAAnBV,mBAAmB;EAAAW,YAFlB;AAAM","names":["AuthenticationGuard","constructor","appState","canActivate","route","state","authState","isAuthenticated","router","navigateByUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\AN\\Tp4_Angular\\src\\app\\guards\\authentication.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AppStateService } from '../services/app-state.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationGuard implements CanActivate {\n  constructor(private appState:AppStateService){\n\n  }\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if(this.appState.authState.isAuthenticated==true){\n      return true;\n    }\n    else\n    {\n      this.router.navigateByUrl(\"/login\");\n      return false;\n    }\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}